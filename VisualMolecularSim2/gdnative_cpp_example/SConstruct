#!python
import os
import sys
sys.path.extend(['', '/nix/store/0cg040crk4c24gx0jmyr2dzzqwllv9jf-scons-4.1.0/lib/python3.9/site-packages', '/nix/store/amn854jw94m1cph654w91pfyvz5r5a6h-python3-3.9.6/lib/python3.9/site-packages', '/nix/store/amn854jw94m1cph654w91pfyvz5r5a6h-python3-3.9.6/lib/python39.zip', '/nix/store/amn854jw94m1cph654w91pfyvz5r5a6h-python3-3.9.6/lib/python3.9', '/nix/store/amn854jw94m1cph654w91pfyvz5r5a6h-python3-3.9.6/lib/python3.9/lib-dynload', '/Volumes/MyTestVolume/SeniorSemester1_Vanderbilt_University/RocketTeam/Projects/RocketCVSim/RocketCVSim/gdnative_cpp_example/.venv/lib/python3.9/site-packages'])
import scons_compiledb
import re
import shlex
import subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()
scons_compiledb.enable_with_cmdline(env) #scons_compiledb.enable(env) # https://pypi.org/project/scons-compiledb/0.4.7/

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'demo/bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libgdexample', PathVariable.PathAccept))

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot-headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    cpp_library += '.osx'
    #matlabRoot = '/Applications/MATLAB_R2020a.app'
    env.Append(CCFLAGS=['-arch', 'x86_64', #'-I', os.path.join(matlabRoot, 'extern/include'), '-pthread'
                        ]) # https://www.mathworks.com/help/matlab/matlab_external/build-c-engine-programs.html
    a=['-std=c++17']
    a.extend(shlex.split(os.environ['NIX_CFLAGS_COMPILE']))
    # https://stackoverflow.com/questions/2502833/store-output-of-subprocess-popen-call-in-a-string
    with subprocess.Popen('pkg-config --cflags python3-embed', stdout=subprocess.PIPE, stderr=None, shell=True) as process:
        output = process.communicate()[0].decode("utf-8")
        a.extend(shlex.split(output))
    env.Append(CXXFLAGS=a)
    a=['-arch', 'x86_64', #'-L', os.path.join(matlabRoot, 'extern/bin/maci64'), '-pthread', '-lMatlabDataArray', '-lMatlabEngine', '-rpath', os.path.join(matlabRoot, 'bin/maci64'), '-rpath', os.path.join(matlabRoot, 'sys/os/maci64'), '-rpath', os.path.join(matlabRoot, 'extern/bin/maci64')
       ]
    a.extend(shlex.split(os.environ['NIX_LDFLAGS']))
    with subprocess.Popen('pkg-config --libs python3-embed', stdout=subprocess.PIPE, stderr=None, shell=True) as process:
        output = process.communicate()[0].decode("utf-8")
        a.extend(shlex.split(output))
    env.Append(LINKFLAGS=a)
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g3', '-O0'])
    else:
        env.Append(CCFLAGS=['-g', '-O3'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    cpp_library += '.linux'
    env.Append(CCFLAGS=['-fPIC'])
    env.Append(CXXFLAGS=['-std=c++17'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g3', '-Og'])
    else:
        env.Append(CCFLAGS=['-g', '-O3'])

elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    cpp_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV=os.environ)

    env.Append(CPPDEFINES=['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])
    env.Append(CCFLAGS=['-W3', '-GR'])
    env.Append(CXXFLAGS='/std:c++17')
    if env['target'] in ('debug', 'd'):
        env.Append(CPPDEFINES=['_DEBUG'])
        env.Append(CCFLAGS=['-EHsc', '-MDd', '-ZI'])
        env.Append(LINKFLAGS=['-DEBUG'])
    else:
        env.Append(CPPDEFINES=['NDEBUG'])
        env.Append(CCFLAGS=['-O2', '-EHsc', '-MD'])

if env['target'] in ('debug', 'd'):
    cpp_library += '.debug'
else:
    cpp_library += '.release'

cpp_library += '.' + str(bits)

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path, cpp_bindings_path + 'include/', cpp_bindings_path + 'include/core/', cpp_bindings_path + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings_path + 'bin/'])
env.Append(LIBS=[cpp_library])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=['src/'])
sources = Glob('src/*.cpp')
print("sources:",sources)

library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))

env.CompileDb()

#print("GetOption('compile_db'):",GetOption('compile_db'), ".")
#if GetOption('compile_db') is not None:

# https://stackoverflow.com/questions/8901296/how-do-i-run-some-code-after-every-build-in-scons
def finish( target, source, env ):
    #raise Exception( 'DO IT' )

    #print(target, source, env)
    
    # Fix compile_commands not being relative to Emacs LSP's project root (which is the parent directory of this SConstruct file)
    with open('compile_commands.json', 'r+') as f: # Open for reading and writing
        lines = f.readlines()
        
        # Hack to prevent re-running
        for line in lines:
            if 'gdnative_cpp_example/' in line:
                return
        
        f.seek(0) # https://stackoverflow.com/questions/8945370/garbage-in-file-after-truncate0-in-python#:~:text=As%20far%20as%20I%20can,may%20appear%20from%20that%20buffer.
        f.truncate(0) # Erase
        linesNew = []
        cwd=os.getcwd()
        for line in lines:
            line = line.replace(cwd, os.path.dirname(cwd))
            line = re.sub("(\-I *|\-L *| *)(src\/?|godot-cpp\/?)", lambda matchobj: matchobj.group(1) + "gdnative_cpp_example/" + matchobj.group(2), line)
            linesNew.append(line)
        f.writelines(linesNew)

# https://stackoverflow.com/questions/8901296/how-do-i-run-some-code-after-every-build-in-scons
#finish_command = Command( 'finish', [], finish )
finish_command = Command( 'finish', ['compiledb'], finish )
#Depends( finish_command, DEFAULT_TARGETS )
Depends( finish_command, 'compiledb' )
Default( finish_command )
# For help: https://scons.org/doc/1.2.0/HTML/scons-man.html and `scons platform=osx target=debug --compiledb= -Q --tree=all`
